{"version":3,"sources":["component/AddCategory.jsx","component/GifGridItem.js","component/GifGrid.js","component/GifExpertApp.jsx","App.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","console","log","cats","type","value","onChange","target","GifGridItem","title","url","className","src","alt","GifGrid","category","useEffect","getGifs","images","setimages","a","encodeURI","fetch","resp","json","data","gif","map","img","id","downsized_medium","GifExpertApp","categories","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OAEcA,EAAc,SAAC,GAA0B,IAApBC,EAAmB,EAAnBA,cAAmB,EAMVC,mBAAS,KANC,mBAMvCC,EANuC,KAM3BC,EAN2B,KAgClD,OACS,aAAT,CAAS,QAAMC,SApBU,SAACC,GAEtBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAO,IACpBC,QAAQC,IAAI,gBAChBV,GAAc,SAAAW,GAAI,OAAGT,GAAH,mBAAiBS,OACvCR,EAAc,OAaV,SAGF,uBACAS,KAAK,OACAC,MAAOX,EACPY,SA9BkB,SAACT,GACnCF,EAAcE,EAAEU,OAAOF,a,+BCARG,EAVK,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,MAAMC,EAAS,EAATA,IAExB,OACI,sBAAKC,UAAU,OAAf,UACI,6BAAKF,IACX,qBAAKG,IAAKF,EAAKG,IAAKJ,QCoDXK,EAxDC,SAAC,GAAqB,IAAfC,EAAc,EAAdA,SAEvBC,qBAAU,WACNC,MACD,IAJkC,MAKTxB,mBAAS,IALA,mBAK9ByB,EAL8B,KAKtBC,EALsB,KAW9BF,EAAO,uCAAC,oCAAAG,EAAA,6DAEJV,EAFI,iDAE0CW,UAAUN,GAFpD,+DAGOO,MAAMZ,GAHb,cAGLa,EAHK,gBAIUA,EAAKC,OAJf,gBAIJC,EAJI,EAIJA,KACPxB,QAAQC,IAAIuB,GAGTC,EAAMD,EAAKE,KAAK,SAAAC,GAAO,IAAD,EACxB,MAAO,CACHC,GAAID,EAAIC,GACRpB,MAAOmB,EAAInB,MACXC,IAAG,UAAGkB,EAAIV,cAAP,aAAG,EAAYY,iBAAiBpB,QAI3CS,EAAUO,GAhBI,4CAAD,qDAqBV,OACC,yCACQ,6BAAKX,IAIFG,EAAOS,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAEIA,GADCA,EAAIC,WCRdE,EAhCK,WAAM,MAKUtC,mBAAS,CAAE,sBALrB,mBAKnBuC,EALmB,KAKPxC,EALO,KAWtB,OACJ,qCACA,gDAIA,cAAC,EAAD,CAAcA,cAAeA,IAC7B,uBACA,6BAEAwC,EAAWL,KAAI,SAAAZ,GAAQ,OACpB,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,YCZFkB,MARf,WACE,OACE,qBAAKtB,UAAU,MAAf,SACE,cAAC,EAAD,OCISuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.262ef945.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nexport  const AddCategory = ({/*7*/setCategories}) => {\r\n\r\n\r\n\r\n\r\n\r\n  /*1*/ const [inputValue, setInputValue] = useState(' ')\r\n\r\n\r\n  /*3*/ const handleInputChange = (e)=>{\r\nsetInputValue(e.target.value)\r\n   }\r\n\r\n/*6*/   const handleSubmit = (e) =>\r\n   {\r\n        e.preventDefault();\r\n\r\n        if( inputValue.trim().length>1){\r\n   /*prueba*/    console.log('submit hecho')\r\n    /*8*/    setCategories(cats=>[inputValue,...cats])\r\n /*9*/   setInputValue(' ')\r\n\r\n\r\n        }\r\n \r\n   }\r\n   \r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n    /*5*/    <form onSubmit={ handleSubmit} >\r\n       \r\n            \r\n           <input \r\n           type=\"text\"\r\n         /*2*/  value={inputValue}\r\n      /*4*/     onChange={handleInputChange}\r\n           />\r\n        </form>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\n\r\nconst GifGridItem = ({title,url}) => {\r\n\r\n    return (\r\n        <div className='card'>\r\n            <h2>{title}</h2>\r\n      <img src={url} alt={title}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem\r\n","import React, { useEffect, useState } from 'react'\r\nimport GifGridItem from './GifGridItem'\r\n\r\nconst GifGrid = ({/*1*/category}) => {\r\n/*5 */\r\nuseEffect(() => {\r\n    getGifs()\r\n}, []) //con esto no se devuelve varias veces mi arreglo del api\r\nconst [images, setimages] = useState([])\r\n\r\n\r\n/*3 obtener datos del api*/  \r\n\r\n\r\n const getGifs=async() =>\r\n{\r\n     const url=`https://api.giphy.com/v1/gifs/search?q=${encodeURI(category) }&limit=10&api_key=41Wansat7zXPeWhBR6yOu9NXdpC1mKCK`\r\n    const resp= await fetch(url)\r\n    const {data} = await resp.json();  \r\n    console.log(data);\r\n    \r\n    /*4 seleccionar algunos datos del api*/ \r\n const gif = data.map( img =>{\r\n     return {\r\n         id: img.id,\r\n         title: img.title,\r\n         url : img.images?.downsized_medium.url\r\n        }\r\n })\r\n\r\n setimages(gif)\r\n\r\n}\r\n\r\n\r\n    return (\r\n     <>   \r\n     {/*2*/} <h3>{category}</h3>\r\n   \r\n      \r\n            {\r\n                images.map( img =>\r\n                    <GifGridItem \r\n                    key={img.id} \r\n                    {...img}\r\n                    \r\n                    />\r\n                    \r\n                    )\r\n            }\r\n\r\n     \r\n\r\n  \r\n\r\n    </>\r\n    )\r\n}\r\n\r\nexport default GifGrid\r\n","import React, { useState } from 'react'\r\nimport {AddCategory} from '../component/AddCategory'\r\nimport GifGrid from './GifGrid'\r\nconst GifExpertApp =() => {\r\n\r\n//const categories = ['bleach', 'dragon ball super', 'naruto']//lo mismo pero a una constante debe ser estatic\r\n\r\n\r\nconst [categories, setCategories] = useState([ 'dragon ball super'])\r\n/*const handleAdd= ()=>{\r\n    //setCategories([...categories,'one piece'])\r\n    setCategories(cats=>[...cats,'one piece'])\r\n}*/\r\n\r\n    return(\r\n<>\r\n<h2>Gif Expert App</h2>\r\n\r\n\r\n{/*<button onClick={handleAdd}>agregar</button>*/}\r\n<AddCategory  setCategories={setCategories}/>\r\n<hr />\r\n<ol>\r\n{\r\ncategories.map(category=>\r\n   <GifGrid key={category} category={category} />\r\n)\r\n\r\n}\r\n\r\n</ol>\r\n \r\n</>\r\n    )\r\n}\r\nexport default GifExpertApp;\r\n\r\n","\nimport './App.css';\nimport GifExpertApp from './component/GifExpertApp'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GifExpertApp />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}